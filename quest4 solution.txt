class Solution {
    public String shortestCommonSupersequence(String str1, String str2) 
    {
        String mix=str1;
        String word = str2;

      if(str1!=str2) 
      { 
     for(int i=0; i<str1.length();i++)
     {
       mix= str1.substring(0,i+1) + str2;
       if(mix.contains(str1) && mix.contains(str2))
        break;
       else
        continue;
     }

    
     
        for(int j=0; j<str2.length();j++)
     {
       word = str2.substring(0,j+1) + str1;
       if(mix.contains(str1) && mix.contains(str2))
        break;
       else
        continue;
     }

     if(mix.length()<=word.length())
      return mix;
     
     else if(word.length()<=mix.length())
      return word;
      }
     

     return str1;
         
    }
}



Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.

 

Example 1:

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.